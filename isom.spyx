"""

flagmatic 2

Copyright (c) 2012, E. R. Vaughan. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1) Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2) Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""

from libc.stdlib cimport malloc, free

cdef int factorial(int n):

	cdef int i, fac
	fac = 1
	for i in range(1, n + 1):
		fac *= i
	return fac

cdef int binomial(int n, int k):

	if n < 0 or k > n or k < 0:
		return 0
	if k == 0:
		return 1
	if n == 0:
		return 0
	return binomial(n - 1, k) + binomial(n - 1, k - 1)

cdef int *permutations[10]
cdef int number_of_permutations[10]

cdef int *generate_permutations(int n, int *number_of):

	cdef int *p, fac, i, j

	# see if we've already generated it!
	if number_of_permutations[n] != 0: 
	
		fac = number_of_permutations[n]
		p = permutations[n]
	
	else:

		perms = Permutations(range(1, n + 1)).list()
		fac = len(perms)
		p = <int *> malloc (sizeof(int) * n * fac)
		for i in range(fac):
			for j in range(n):
				p[(i * n) + j] = <int> perms[i][j]

		permutations[n] = p
		number_of_permutations[n] = fac
	
	if number_of:
		number_of[0] = fac

	return p

cdef int *permutations_fixing[10][10]
cdef int number_of_permutations_fixing[10][10]

cdef int *generate_permutations_fixing(int n, int s, int *number_of):

	cdef int *p, fac, i, j

	# see if we've already generated it!
	if number_of_permutations_fixing[n][s] != 0: 
	
		fac = number_of_permutations_fixing[n][s]
		p = permutations_fixing[n][s]
	
	else:

		perms = Permutations(range(s + 1, n + 1)).list()
		fac = len(perms)
		p = <int *> malloc (sizeof(int) * n * fac)
		for i in range(fac):
			for j in range(n):
				if j < s:
					p[(i * n) + j] = j + 1
				else:
					p[(i * n) + j] = <int> perms[i][j - s]

		permutations_fixing[n][s] = p
		number_of_permutations_fixing[n][s] = fac
	
	if number_of:
		number_of[0] = fac

	return p

cdef int *combinations[10][10]
cdef int number_of_combinations[10][10]

cdef int *generate_combinations(int n, int s, int *number_of):

	cdef int *p, fac, i, j

	# see if we've already generated it!
	if number_of_combinations[n][s] != 0: 
	
		fac = number_of_combinations[n][s]
		p = combinations[n][s]
	
	else:

		perms = Combinations(range(1, n + 1), s).list()
		fac = len(perms)
		p = <int *> malloc (sizeof(int) * s * fac)
		for i in range(fac):
			for j in range(s):
				p[(i * s) + j] = <int> perms[i][j]

		combinations[n][s] = p
		number_of_combinations[n][s] = fac
	
	if number_of:
		number_of[0] = fac

	return p

cdef void minimize_edges(int *edges, int m):

	cdef int i, *e

	for i in range(m):
		e = &edges[i * 3]
		if e[0] > e[1]:
			e[0], e[1] = e[1], e[0]
		if e[1] > e[2]:
			e[1], e[2] = e[2], e[1]
		if e[0] > e[1]:
			e[0], e[1] = e[1], e[0]

	cdef int round = 1, swapped
	
	while True:
	
		swapped = 0
		for i in range(m - round):
			
			e = &edges[i * 3]
			
			if e[0] < e[3]:
				continue
			if e[0] == e[3]:
				if e[1] < e[4]:
					continue
				if e[1] == e[4]:
					if e[2] < e[5]:
						continue
						
			e[0], e[3] = e[3], e[0]
			e[1], e[4] = e[4], e[1]
			e[2], e[5] = e[5], e[2]

			swapped = 1
			
		if swapped == 0:
			break
			
		round += 1

def minimal_isomorph (g, tg):

	cdef int i, n, m, *edges, *new_edges, *e
	
	n = g[0]
	m = len(g[1])
	if tg:
		t = tg[0]
	else:
		t = 0

	edges = <int *> malloc (sizeof(int) * 3 * m)
	new_edges = <int *> malloc (sizeof(int) * 3 * m)
	winning_edges = <int *> malloc (sizeof(int) * 3 * m)
	
	for i in range(m):
		e = &edges[3 * i]
		e[0] = g[1][i][0]
		e[1] = g[1][i][1]
		e[2] = g[1][i][2]
	
	cdef int *p, np, is_lower
	p = generate_permutations_fixing(n, t, &np)

	for i in range(np):
	
		for j in range(3 * m):
			new_edges[j] = p[n * i + edges[j] - 1]
	
		minimize_edges(new_edges, m)

		if i == 0:
			for j in range(3 * m):
				winning_edges[j] = new_edges[j]
			continue

		is_lower = 1

		for j in range(3 * m):
			if new_edges[j] > winning_edges[j]:
				is_lower = 0
				break
			elif new_edges[j] < winning_edges[j]:
				break
		
		if is_lower: # We have a new winner
			for j in range(3 * m):
				winning_edges[j] = new_edges[j]
	
	edge_list = []
	for i in range(0, 3 * m, 3):
		edge_list.append((winning_edges[i], winning_edges[i + 1], winning_edges[i + 2]))
	
	free(edges)
	free(new_edges)
	free(winning_edges)

	return (n, tuple(edge_list))


def has_forbidden_edge_numbers(g, forbidden_edge_numbers, must_have_highest=False):

	cdef int *c, nc, i, j, k, l, n, fe, *edges, *e, got, *comb, num_e, mhh

	n = g[0]
	m = len(g[1])
	edges = <int *> malloc (sizeof(int) * 3 * m)
	
	for i in range(m):
		e = &edges[3 * i]
		e[0] = g[1][i][0]
		e[1] = g[1][i][1]
		e[2] = g[1][i][2]

	for pk, pfe in forbidden_edge_numbers.iteritems():

		k = <int> pk
		fe = <int> pfe
		
		if k > n:
			continue # vacuous condition

		if fe < 1:
			raise ValueError
		
		if must_have_highest:
		
			c = generate_combinations(n - 1, k - 1, &nc)

			for i in range(nc):
				comb = &c[(k - 1) * i]
				num_e = 0
				for j in range(m):
					got = 0
					e = &edges[3 * j]
					for l in range(k - 1):
						if comb[l] == e[0] or comb[l] == e[1] or comb[l] == e[2]:
							got += 1
					if n == e[0] or n == e[1] or n == e[2]:
							got += 1
					if got == 3:
						num_e += 1
						if num_e == fe:
							free(edges)
							return True

		else:

			c = generate_combinations(n, k, &nc)

			for i in range(nc):
				comb = &c[k * i]
				num_e = 0
				for j in range(m):
					got = 0
					e = &edges[3 * j]
					for l in range(k):
						if comb[l] == e[0] or comb[l] == e[1] or comb[l] == e[2]:
							got += 1
					if got == 3:
						num_e += 1
						if num_e == fe:
							free(edges)
							return True

	free(edges)
	return False
	
# def get_permutations (n):
# 
# 	cdef int *p, np, i, j
# 	p = generate_permutations(n, &np)
# 	return [[p[(i * n) + j] for j in range(n)] for i in range(np)]



# def minimal_isomorph (g):
# 	
# 	n = g[0]
# 	min_edges = g[1]
# 	
# 	for p in itertools.permutations(range(1, n + 1), n):
# 		
# 		edges = tuple(sorted([tuple(sorted([p[e[i] - 1] for i in range(2)]))
# 			for e in g[1]]))
# 		
# 		if edges < min_edges:
# 			min_edges = edges
# 			
# 	return (n, min_edges)
# 



#print len(generate_graphs(6))
