"""

flagmatic 2

Copyright (c) 2012, E. R. Vaughan. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1) Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2) Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""

#clang c

from libc.stdlib cimport malloc, calloc, free


ctypedef struct raw_graph:
	int n, ne
	int edges[35 * 3]

cdef class graph_block:
	cdef int n, len
	cdef raw_graph *graphs

def make_graph_block(graphs, n):

	cdef int i, j, ne, *e
	gb = graph_block()
	gb.n = n
	gb.len = len(graphs)

	gb.graphs = <raw_graph *> calloc (gb.len, sizeof(raw_graph))
	
	for i in range(gb.len):
		g = graphs[i]
		ne = len(g[1])
		gb.graphs[i].n = g[0]
		gb.graphs[i].ne = ne
		for j in range(ne):
			e = &(gb.graphs[i].edges[3 * j])
			e[0] = g[1][j][0]
			e[1] = g[1][j][1]
			e[2] = g[1][j][2]
	
	return gb


cdef class combinatorial_info_block:
	cdef int np
	cdef int *p


previous_permutations = {}

cdef int *generate_permutations_fixing(int n, int s, int *number_of):

	cdef int *p, fac, i, j

	# see if we've already generated it!
	key = (n, s)
	if key in previous_permutations.iterkeys():
	
		cib = <combinatorial_info_block>previous_permutations[key]
		fac = cib.np
		p = cib.p
	
	else:

		perms = Permutations(range(s + 1, n + 1)).list()
		fac = len(perms)
		p = <int *> malloc (sizeof(int) * n * fac)
		for i in range(fac):
			for j in range(n):
				if j < s:
					p[(i * n) + j] = j + 1
				else:
					p[(i * n) + j] = <int> perms[i][j - s]

		cib = combinatorial_info_block()
		cib.np = fac
		cib.p = p
		previous_permutations[key] = cib
	
	if number_of:
		number_of[0] = fac

	return p

cdef int *generate_permutations(int n, int *number_of):

	return generate_permutations_fixing(n, <int> 0, number_of)

# def get_permutations (n):
# 
# 	cdef int *p, np, i, j
# 	p = generate_permutations(n, &np)
# 	return [[p[(i * n) + j] for j in range(n)] for i in range(np)]


previous_combinations = {}

cdef int *generate_combinations(int n, int s, int *number_of):

	cdef int *p, fac, i, j

	# see if we've already generated it!
	key = (n, s)
	if key in previous_combinations.iterkeys():
	
		cib = <combinatorial_info_block>previous_combinations[key]
		fac = cib.np
		p = cib.p

	else:

		perms = Combinations(range(1, n + 1), s).list()
		fac = len(perms)
		p = <int *> malloc (sizeof(int) * s * fac)
		for i in range(fac):
			for j in range(s):
				p[(i * s) + j] = <int> perms[i][j]

		cib = combinatorial_info_block()
		cib.np = fac
		cib.p = p
		previous_combinations[key] = cib
	
	if number_of:
		number_of[0] = fac

	return p


previous_pair_combinations = {}

cdef int *generate_pair_combinations(int n, int s, int m1, int m2, int *number_of):

	cdef int *p, fac, i, j

	# see if we've already generated it!
	key = (n, s, m1, m2)
	if key in previous_pair_combinations.iterkeys():
	
		cib = <combinatorial_info_block>previous_pair_combinations[key]
		fac = cib.np
		p = cib.p
	
	else:
	
		fac = falling_factorial(n, s) * binomial(n - s, m1 - s) * binomial(n - m1, m2 - s)
		p = <int *> malloc (sizeof(int) * n * fac)
		i = 0
		vertices = range(1, n + 1)
		perms = Permutations(vertices, s)
		for perm in perms:
			available_verts = [v for v in vertices if not v in perm]
			combs1 = Combinations(available_verts, m1 - s)
			first_one = True
			for comb1 in combs1:
				remaining_verts = [v for v in available_verts if not v in comb1]
				combs2 = Combinations(remaining_verts, m2 - s)
				first_two = True
				for comb2 in combs2:
					for j in range(s):
						if first_one:
							p[(i * n) + j] = <int> perm[j]
						else:
							p[(i * n) + j] = <int> 0
					for j in range(m1 - s):
						if first_two:
							p[(i * n) + s + j] = <int> comb1[j]
						else:
							p[(i * n) + s + j] = <int> 0
					for j in range(m2 - s):
						p[(i * n) + m1 + j] = <int> comb2[j]
					for j in range(n - m1 - m2 + s):
						p[(i * n) + m1 + m2 - s + j] = <int> 0
					first_one = False
					first_two = False
					i += 1			

		cib = combinatorial_info_block()
		cib.np = fac
		cib.p = p
		previous_pair_combinations[key] = cib
	
	if number_of:
		number_of[0] = fac

	return p

def get_pair_combinations (n, s, m1, m2):

	cdef int *p, np, i, j
	p = generate_pair_combinations(n, s, m1, m2, &np)
	return [[p[(i * n) + j] for j in range(n)] for i in range(np)]

previous_equal_pair_combinations = {}

cdef int *generate_equal_pair_combinations(int n, int s, int m, int *number_of):

	cdef int *p, fac, i, j, smallest

	# see if we've already generated it!
	key = (n, s, m)
	if key in previous_equal_pair_combinations.iterkeys():
	
		cib = <combinatorial_info_block>previous_equal_pair_combinations[key]
		fac = cib.np
		p = cib.p
	
	else:
	
		fac = falling_factorial(n, s) * binomial(n - s, m - s) * binomial(n - m, m - s) / 2
		p = <int *> malloc (sizeof(int) * n * fac)
		i = 0
		vertices = range(1, n + 1)
		perms = Permutations(vertices, s)
		for perm in perms:
			available_verts = [v for v in vertices if not v in perm]
			combs1 = Combinations(available_verts, m - s)
			first_one = True
			for comb1 in combs1:
				remaining_verts = [v for v in available_verts if not v in comb1]
				combs2 = Combinations(remaining_verts, m - s)
				smallest = min(comb1)
				first_two = True
				for comb2 in combs2:
					if min(comb2) < smallest:
						continue
					for j in range(s):
						if first_one:
							p[(i * n) + j] = <int> perm[j]
						else:
							p[(i * n) + j] = <int> 0
					for j in range(m - s):
						if first_two:
							p[(i * n) + s + j] = <int> comb1[j]
						else:
							p[(i * n) + s + j] = <int> 0
					for j in range(m - s):
						p[(i * n) + m + j] = <int> comb2[j]
					for j in range(n - m - m + s):
						p[(i * n) + m + m - s + j] = <int> 0
					first_one = False
					first_two = False
					i += 1			

		cib = combinatorial_info_block()
		cib.np = fac
		cib.p = p
		previous_equal_pair_combinations[key] = cib
	
	if number_of:
		number_of[0] = fac

	return p

def get_equal_pair_combinations (n, s, m):

	cdef int *p, np, i, j
	p = generate_equal_pair_combinations(n, s, m, &np)
	return [[p[(i * n) + j] for j in range(n)] for i in range(np)]


cdef void minimize_edges(int *edges, int m):

	cdef int i, *e

	for i in range(m):
		e = &edges[i * 3]
		if e[0] > e[1]:
			e[0], e[1] = e[1], e[0]
		if e[1] > e[2]:
			e[1], e[2] = e[2], e[1]
		if e[0] > e[1]:
			e[0], e[1] = e[1], e[0]

	cdef int round = 1, swapped
	
	while True:
	
		swapped = 0
		for i in range(m - round):
			
			e = &edges[i * 3]
			
			if e[0] < e[3]:
				continue
			if e[0] == e[3]:
				if e[1] < e[4]:
					continue
				if e[1] == e[4]:
					if e[2] < e[5]:
						continue
						
			e[0], e[3] = e[3], e[0]
			e[1], e[4] = e[4], e[1]
			e[2], e[5] = e[5], e[2]

			swapped = 1
			
		if swapped == 0:
			break
			
		round += 1


def minimal_isomorph (g, tg):

	cdef int i, n, m, *edges, *new_edges, *e
	cdef int *p, np, is_lower
	
	n = g[0]
	m = len(g[1])
	if tg:
		t = tg[0]
	else:
		t = 0

	edges = <int *> malloc (sizeof(int) * 3 * m)
	new_edges = <int *> malloc (sizeof(int) * 3 * m)
	winning_edges = <int *> malloc (sizeof(int) * 3 * m)
	
	for i in range(m):
		e = &edges[3 * i]
		e[0] = g[1][i][0]
		e[1] = g[1][i][1]
		e[2] = g[1][i][2]
	
	p = generate_permutations_fixing(n, t, &np)

	for i in range(np):
	
		for j in range(3 * m):
			new_edges[j] = p[n * i + edges[j] - 1]
	
		minimize_edges(new_edges, m)

		if i == 0:
			for j in range(3 * m):
				winning_edges[j] = new_edges[j]
			continue

		is_lower = 1

		for j in range(3 * m):
			if new_edges[j] > winning_edges[j]:
				is_lower = 0
				break
			elif new_edges[j] < winning_edges[j]:
				break
		
		if is_lower: # We have a new winner
			for j in range(3 * m):
				winning_edges[j] = new_edges[j]
	
	edge_list = []
	for i in range(0, 3 * m, 3):
		edge_list.append((winning_edges[i], winning_edges[i + 1], winning_edges[i + 2]))
	
	free(edges)
	free(new_edges)
	free(winning_edges)

	return (n, tuple(edge_list))


def induced_subgraph (g, S):

	good_edges = [e for e in g[1] if all(x in S for x in e)]
	p = [0 for i in range(g[0] + 1)]
	for i in range(len(S)):
		p[S[i]] = i + 1

	edges = sorted([tuple(sorted([p[x] for x in e])) for e in good_edges])

	return (len(S), tuple(edges))


cdef void c_induced_subgraph (int *edges, int *new_edges, int m, int *new_m, int *verts, int s):

	cdef int nm = 0, i, j, k, *e, got, te[3]
	
	for i in range(m):
		e = &edges[3 * i]
		got = 0
		for j in range(s):
			if e[0] == verts[j]:
				got += 1
				te[0] = j + 1
			elif e[1] == verts[j]:
				got += 1
				te[1] = j + 1
			elif e[2] == verts[j]:
				got += 1
				te[2] = j + 1
		if got == 3:
			e = &new_edges[3 * nm]
			e[0] = te[0]
			e[1] = te[1]
			e[2] = te[2]
			nm += 1
	
	new_m[0] = nm

	return


cdef void c_minimal_isomorph (int n, int *edges, int m, int t):

	cdef int i, *new_edges, *winning_edges, *e
	cdef int *p, np, is_lower
	
	new_edges = <int *> malloc (sizeof(int) * 3 * m)
	winning_edges = <int *> malloc (sizeof(int) * 3 * m)
	
	p = generate_permutations_fixing(n, t, &np)

	for i in range(np):
	
		for j in range(3 * m):
			new_edges[j] = p[n * i + edges[j] - 1]
	
		minimize_edges(new_edges, m)

		if i == 0:
			for j in range(3 * m):
				winning_edges[j] = new_edges[j]
			continue

		is_lower = 1

		for j in range(3 * m):
			if new_edges[j] > winning_edges[j]:
				is_lower = 0
				break
			elif new_edges[j] < winning_edges[j]:
				break
		
		if is_lower: # We have a new winner
			for j in range(3 * m):
				winning_edges[j] = new_edges[j]
	
	for i in range(3 * m):
		edges[i] = winning_edges[i]
	
	free(new_edges)
	free(winning_edges)

	return


cdef class result_block:
	cdef int len, denominator
	cdef int rows, cols, size
	cdef int *p

def matrix_from_result_block (result_block rb, int k):

	cdef int i, j
	M = Matrix(QQ, rb.rows, rb.cols)
	for i in range(rb.rows):
		for j in range(rb.cols):
			M[i, j] = Integer(rb.p[(rb.size * k) + (i * rb.rows) + j]) / rb.denominator
	
	return M

def gb_flag_products (graph_block gb, graph_block tb, graph_block flags1, graph_block flags2):

	cdef int *p, np, *pp, *pf1, *pf2, *edges, *cur_edges
	cdef int n, s, m1, m2, ne, i, j, k, gi
	cdef int cnte, cnf1e, cnf2e
	cdef int has_type, has_f1
	cdef int f1index, f2index, *grb
	
	sig_on()
	
	n = gb.n
	s = tb.n
	m1 = flags1.n
	m2 = flags2.n

	if m1 == m2:
		p = generate_equal_pair_combinations(n, s, m1, &np)
	else:
		p = generate_pair_combinations(n, s, m1, m2, &np)

	cur_edges = <int *> malloc (sizeof(int) * 3 * 35)	
	pf1 = <int *> malloc (sizeof(int) * m1)
	pf2 = <int *> malloc (sizeof(int) * m2)

	rb = result_block()
	rb.len = gb.len
	rb.rows = flags1.len
	rb.cols = flags2.len
	rb.size = rb.rows * rb.cols
	if m1 == m2:
		rb.denominator = np * 2
	else:
		rb.denominator = np
	rb.p = <int *> calloc (rb.size * rb.len, sizeof(int))

	for gi in range(gb.len):
	
		grb = &rb.p[gi * rb.size]
		ne = gb.graphs[gi].ne
		edges = gb.graphs[gi].edges

		has_type = 0
		has_f1 = 0

		for i in range(np):
		
			pp = &p[(i * n)]
		
			if pp[0] != 0:
		
				for j in range(s):
					pf1[j] = pp[j]
					pf2[j] = pp[j]
			
				has_type = 0
				c_induced_subgraph(edges, cur_edges, ne, &cnte, pf1, s)
				
				if cnte == tb.graphs[0].ne:
					if all(cur_edges[j] == tb.graphs[0].edges[j] for j in range(cnte * 3)):
						has_type = 1
	
			if has_type == 0:
				continue
			
			if has_type and pp[s] != 0:
	
				has_f1 = 0
	
				for j in range(m1 - s):
					pf1[s + j] = pp[s + j]
	
				c_induced_subgraph(edges, cur_edges, ne, &cnf1e, pf1, m1)
				c_minimal_isomorph(n, cur_edges, cnf1e, s)
				
				for j in range(flags1.len):
					if flags1.graphs[j].ne == cnf1e:
						if all(cur_edges[k] == flags1.graphs[j].edges[k] for k in range(cnf1e * 3)):
							has_f1 = 1
							f1index = j
							break
	
			if has_f1 == 0:
				continue
	
			for j in range(m2 - s):
				pf2[s + j] = pp[m1 + j]
	
			c_induced_subgraph(edges, cur_edges, ne, &cnf2e, pf2, m2)
			c_minimal_isomorph(n, cur_edges, cnf2e, s)
			
			for j in range(flags2.len):
				if flags2.graphs[j].ne == cnf2e:
					if all(cur_edges[k] == flags2.graphs[j].edges[k] for k in range(cnf2e * 3)):
						f2index = j
						grb[(f1index * flags1.len) + f2index] += 1
						break

		if m1 == m2:
			for i in range(flags1.len):
				grb[(i * flags1.len) + i] *= 2
				for j in range(i + 1, flags1.len):
					grb[(i * flags1.len) + j] += grb[(j * flags1.len) + i]
					grb[(j * flags1.len) + i] = grb[(i * flags1.len) + j]

	free(pf1)
	free(pf2)
	free(cur_edges)
	
	sig_off()
	
	return rb

def has_forbidden_edge_numbers(g, forbidden_edge_numbers, must_have_highest=False):

	cdef int *c, nc, i, j, k, l, n, fe, *edges, *e, got, *comb, num_e, mhh

	n = g[0]
	m = len(g[1])
	edges = <int *> malloc (sizeof(int) * 3 * m)
	
	for i in range(m):
		e = &edges[3 * i]
		e[0] = g[1][i][0]
		e[1] = g[1][i][1]
		e[2] = g[1][i][2]

	for pk, pfe in forbidden_edge_numbers.iteritems():

		k = <int> pk
		fe = <int> pfe
		
		if k > n:
			continue # vacuous condition

		if fe < 1:
			raise ValueError
		
		if must_have_highest:
		
			c = generate_combinations(n - 1, k - 1, &nc)

			for i in range(nc):
				comb = &c[(k - 1) * i]
				num_e = 0
				for j in range(m):
					got = 0
					e = &edges[3 * j]
					for l in range(k - 1):
						if comb[l] == e[0] or comb[l] == e[1] or comb[l] == e[2]:
							got += 1
					if n == e[0] or n == e[1] or n == e[2]:
							got += 1
					if got == 3:
						num_e += 1
						if num_e == fe:
							free(edges)
							return True

		else:

			c = generate_combinations(n, k, &nc)

			for i in range(nc):
				comb = &c[k * i]
				num_e = 0
				for j in range(m):
					got = 0
					e = &edges[3 * j]
					for l in range(k):
						if comb[l] == e[0] or comb[l] == e[1] or comb[l] == e[2]:
							got += 1
					if got == 3:
						num_e += 1
						if num_e == fe:
							free(edges)
							return True

	free(edges)
	return False
	
# def minimal_isomorph (g):
# 	
# 	n = g[0]
# 	min_edges = g[1]
# 	
# 	for p in itertools.permutations(range(1, n + 1), n):
# 		
# 		edges = tuple(sorted([tuple(sorted([p[e[i] - 1] for i in range(2)]))
# 			for e in g[1]]))
# 		
# 		if edges < min_edges:
# 			min_edges = edges
# 			
# 	return (n, min_edges)
# 



#print len(generate_graphs(6))
